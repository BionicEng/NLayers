// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NLayers.Repository.DbContexts;

#nullable disable

namespace NLayers.Repository.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("NLayers.Core.Entities.CertificateEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CertificateDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CertificateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CertificatesTable");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CertificateDescription = "Test",
                            CertificateName = "Test1",
                            CreatedAt = new DateTime(2024, 1, 3, 17, 14, 4, 94, DateTimeKind.Local).AddTicks(4083),
                            FileName = "Test",
                            FilePath = "Test",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CertificateDescription = "Test",
                            CertificateName = "Test2",
                            CreatedAt = new DateTime(2024, 1, 3, 17, 14, 4, 94, DateTimeKind.Local).AddTicks(4084),
                            FileName = "Test",
                            FilePath = "Test",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            CertificateDescription = "Test",
                            CertificateName = "Test3",
                            CreatedAt = new DateTime(2024, 1, 3, 17, 14, 4, 94, DateTimeKind.Local).AddTicks(4085),
                            FileName = "Test",
                            FilePath = "Test",
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            CertificateDescription = "Test",
                            CertificateName = "Test4",
                            CreatedAt = new DateTime(2024, 1, 3, 17, 14, 4, 94, DateTimeKind.Local).AddTicks(4112),
                            FileName = "Test",
                            FilePath = "Test",
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            CertificateDescription = "Test",
                            CertificateName = "Test5",
                            CreatedAt = new DateTime(2024, 1, 3, 17, 14, 4, 94, DateTimeKind.Local).AddTicks(4113),
                            FileName = "Test",
                            FilePath = "Test",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("NLayers.Core.Entities.CompanyInfoEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CompanyAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyField")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CompanyInfoTable");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyAddress = "Test1",
                            CompanyDescription = "Test1",
                            CompanyField = "Test1",
                            CompanyName = "Test1",
                            FileName = "Test1",
                            FilePath = "Test1",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CompanyAddress = "Test2",
                            CompanyDescription = "Test2",
                            CompanyField = "Test2",
                            CompanyName = "Test2",
                            FileName = "Test2",
                            FilePath = "Test2",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            CompanyAddress = "Test3",
                            CompanyDescription = "Test3",
                            CompanyField = "Test3",
                            CompanyName = "Test3",
                            FileName = "Test3",
                            FilePath = "Test3",
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            CompanyAddress = "Test4",
                            CompanyDescription = "Test4",
                            CompanyField = "Test4",
                            CompanyName = "Test4",
                            FileName = "Test4",
                            FilePath = "Test4",
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            CompanyAddress = "Test5",
                            CompanyDescription = "Test5",
                            CompanyField = "Test5",
                            CompanyName = "Test5",
                            FileName = "Test5",
                            FilePath = "Test5",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("NLayers.Core.Entities.CompanyUserRoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CompanyInfoId")
                        .HasColumnType("int");

                    b.Property<string>("UserRoleDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserRoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyInfoId");

                    b.ToTable("CompanyUserRoleTable");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyInfoId = 1,
                            UserRoleDescription = "Test1",
                            UserRoleName = "Test1"
                        },
                        new
                        {
                            Id = 2,
                            CompanyInfoId = 2,
                            UserRoleDescription = "Test2",
                            UserRoleName = "Test2"
                        },
                        new
                        {
                            Id = 3,
                            CompanyInfoId = 3,
                            UserRoleDescription = "Test3",
                            UserRoleName = "Test3"
                        },
                        new
                        {
                            Id = 4,
                            CompanyInfoId = 4,
                            UserRoleDescription = "Test4",
                            UserRoleName = "Test4"
                        },
                        new
                        {
                            Id = 5,
                            CompanyInfoId = 5,
                            UserRoleDescription = "Test5",
                            UserRoleName = "Test5"
                        },
                        new
                        {
                            Id = 6,
                            CompanyInfoId = 1,
                            UserRoleDescription = "Test6",
                            UserRoleName = "Test6"
                        },
                        new
                        {
                            Id = 7,
                            CompanyInfoId = 1,
                            UserRoleDescription = "Test7",
                            UserRoleName = "Test7"
                        });
                });

            modelBuilder.Entity("NLayers.Core.Entities.KnownProgramEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProgramDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProgramName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("KnownProgramTable");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProgramDescription = "Test1",
                            ProgramName = "Test1",
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            ProgramDescription = "Test2",
                            ProgramName = "Test2",
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            ProgramDescription = "Test3",
                            ProgramName = "Test3",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("NLayers.Core.Entities.SchoolDepartmentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DepartmentDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SchoolsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SchoolsId");

                    b.ToTable("SchoolDepartmentTable");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartmentDescription = "Test1",
                            DepartmentName = "Test1",
                            SchoolsId = 2
                        },
                        new
                        {
                            Id = 2,
                            DepartmentDescription = "Test2",
                            DepartmentName = "Test2",
                            SchoolsId = 3
                        },
                        new
                        {
                            Id = 3,
                            DepartmentDescription = "Test3",
                            DepartmentName = "Test3",
                            SchoolsId = 1
                        });
                });

            modelBuilder.Entity("NLayers.Core.Entities.SchoolInformationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SchoolInformationTable");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Location = "Test1",
                            SchoolDescription = "Test1",
                            SchoolName = "Test1",
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            Location = "Test2",
                            SchoolDescription = "Test2",
                            SchoolName = "Test2",
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            Location = "Test3",
                            SchoolDescription = "Test3",
                            SchoolName = "Test3",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("NLayers.Core.Entities.SpeakingLanguageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SpeakingLanguagesTable");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LanguageDescription = "Test1",
                            LanguageName = "Test1",
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            LanguageDescription = "Test2",
                            LanguageName = "Test2",
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            LanguageDescription = "Test3",
                            LanguageName = "Test3",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("NLayers.Core.Entities.UserAdressEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserAdressTable");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityName = "Ankara/Sincan",
                            Country = "Türkiye",
                            PostalCode = "12345",
                            State = "A Mah",
                            StreetName = "12345"
                        },
                        new
                        {
                            Id = 2,
                            CityName = "Ankara/Yenimahalle",
                            Country = "Türkiye",
                            PostalCode = "12345",
                            State = "B Mah",
                            StreetName = "12345"
                        },
                        new
                        {
                            Id = 3,
                            CityName = "Ankara/Ostim",
                            Country = "Türkiye",
                            PostalCode = "12345",
                            State = "C Mah",
                            StreetName = "12345"
                        });
                });

            modelBuilder.Entity("NLayers.Core.Entities.UserEntity", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Roles")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.ToTable("UsersTable");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CreatedAt = new DateTime(2024, 1, 3, 17, 14, 4, 94, DateTimeKind.Local).AddTicks(3995),
                            Email = "AdminEmail@email.com",
                            FirstName = "AdminName",
                            LastName = "AdminLastName",
                            Password = "Admin",
                            PhoneNumber = "AdminPhoneNumber",
                            Roles = "Admin"
                        },
                        new
                        {
                            UserId = 2,
                            CreatedAt = new DateTime(2024, 1, 3, 17, 14, 4, 94, DateTimeKind.Local).AddTicks(4005),
                            Email = "Email1@email.com",
                            FirstName = "FirstName1",
                            LastName = "LastName1",
                            Password = "Password1",
                            PhoneNumber = "PhoneNumber1",
                            Roles = "User"
                        },
                        new
                        {
                            UserId = 3,
                            CreatedAt = new DateTime(2024, 1, 3, 17, 14, 4, 94, DateTimeKind.Local).AddTicks(4006),
                            Email = "Email2@email.com",
                            FirstName = "FirstName2",
                            LastName = "LastName2",
                            Password = "Password2",
                            PhoneNumber = "PhoneNumber2",
                            Roles = "User"
                        });
                });

            modelBuilder.Entity("NLayers.Core.Entities.UserInformationEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirtDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hobies")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("MSwasDone")
                        .HasColumnType("bit");

                    b.Property<string>("UserDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserInformationTable");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirtDay = new DateTime(2023, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = "Male",
                            Hobies = "Hobies A",
                            MSwasDone = true,
                            UserDescription = "Description A"
                        },
                        new
                        {
                            Id = 2,
                            BirtDay = new DateTime(2023, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = "Male",
                            Hobies = "Hobies b",
                            MSwasDone = true,
                            UserDescription = "Description b"
                        },
                        new
                        {
                            Id = 3,
                            BirtDay = new DateTime(2023, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = "Male",
                            Hobies = "Hobies c",
                            MSwasDone = true,
                            UserDescription = "Description c"
                        });
                });

            modelBuilder.Entity("NLayers.Core.Entities.CertificateEntity", b =>
                {
                    b.HasOne("NLayers.Core.Entities.UserEntity", "User")
                        .WithMany("Certificates")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NLayers.Core.Entities.CompanyInfoEntity", b =>
                {
                    b.HasOne("NLayers.Core.Entities.UserEntity", "User")
                        .WithMany("CompanyInfos")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NLayers.Core.Entities.CompanyUserRoleEntity", b =>
                {
                    b.HasOne("NLayers.Core.Entities.CompanyInfoEntity", "CompanyInfo")
                        .WithMany("UserRoles")
                        .HasForeignKey("CompanyInfoId");

                    b.Navigation("CompanyInfo");
                });

            modelBuilder.Entity("NLayers.Core.Entities.KnownProgramEntity", b =>
                {
                    b.HasOne("NLayers.Core.Entities.UserEntity", "User")
                        .WithMany("KnownPrograms")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NLayers.Core.Entities.SchoolDepartmentEntity", b =>
                {
                    b.HasOne("NLayers.Core.Entities.SchoolInformationEntity", "Schools")
                        .WithMany("StudentDepartments")
                        .HasForeignKey("SchoolsId");

                    b.Navigation("Schools");
                });

            modelBuilder.Entity("NLayers.Core.Entities.SchoolInformationEntity", b =>
                {
                    b.HasOne("NLayers.Core.Entities.UserEntity", "User")
                        .WithMany("SchoolInfos")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NLayers.Core.Entities.SpeakingLanguageEntity", b =>
                {
                    b.HasOne("NLayers.Core.Entities.UserEntity", "User")
                        .WithMany("Languages")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NLayers.Core.Entities.UserAdressEntity", b =>
                {
                    b.HasOne("NLayers.Core.Entities.UserEntity", "User")
                        .WithOne("UserAdress")
                        .HasForeignKey("NLayers.Core.Entities.UserAdressEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NLayers.Core.Entities.UserInformationEntity", b =>
                {
                    b.HasOne("NLayers.Core.Entities.UserEntity", "User")
                        .WithOne("UserInfo")
                        .HasForeignKey("NLayers.Core.Entities.UserInformationEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NLayers.Core.Entities.CompanyInfoEntity", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("NLayers.Core.Entities.SchoolInformationEntity", b =>
                {
                    b.Navigation("StudentDepartments");
                });

            modelBuilder.Entity("NLayers.Core.Entities.UserEntity", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("CompanyInfos");

                    b.Navigation("KnownPrograms");

                    b.Navigation("Languages");

                    b.Navigation("SchoolInfos");

                    b.Navigation("UserAdress");

                    b.Navigation("UserInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
